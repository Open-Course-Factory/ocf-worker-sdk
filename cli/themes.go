package cli

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// themesCmd repr√©sente la commande themes
var themesCmd = &cobra.Command{
	Use:   "themes",
	Short: "Gestion des th√®mes Slidev",
	Long: `Commandes pour g√©rer les th√®mes Slidev disponibles et install√©s.

Exemples:
  ocf-cli themes list
  ocf-cli themes install @slidev/theme-seriph
  ocf-cli themes detect <job-id>`,
}

// themesListCmd liste les th√®mes disponibles
var themesListCmd = &cobra.Command{
	Use:   "list",
	Short: "Liste les th√®mes Slidev disponibles",
	Long:  "Affiche tous les th√®mes Slidev disponibles avec leur statut d'installation.",
	RunE:  runThemesList,
}

func runThemesList(cmd *cobra.Command, args []string) error {
	client := createClient()

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	themes, err := client.Themes.ListAvailable(ctx)
	if err != nil {
		return fmt.Errorf("impossible de r√©cup√©rer les th√®mes: %w", err)
	}

	cmd.Printf("üé® Th√®mes Slidev disponibles\n")
	cmd.Printf("============================\n")

	if themes.Count == 0 {
		cmd.Printf("Aucun th√®me disponible.\n")
		return nil
	}

	// Calculer la largeur des colonnes
	maxNameWidth := 0
	maxVersionWidth := 0
	for _, theme := range themes.Themes {
		if len(theme.Name) > maxNameWidth {
			maxNameWidth = len(theme.Name)
		}
		if len(theme.Version) > maxVersionWidth {
			maxVersionWidth = len(theme.Version)
		}
	}

	// Afficher les th√®mes
	for _, theme := range themes.Themes {
		status := "‚ùå"
		if theme.Installed {
			status = "‚úÖ"
		}

		cmd.Printf("%s %-*s %-*s %s\n",
			status,
			maxNameWidth, theme.Name,
			maxVersionWidth, theme.Version,
			theme.Description)
	}

	cmd.Printf("\nTotal: %d th√®mes (%d install√©s, %d disponibles)\n",
		themes.Summary.Total,
		themes.Summary.Installed,
		themes.Summary.Available)

	return nil
}

// themesInstallCmd installe un th√®me
var themesInstallCmd = &cobra.Command{
	Use:   "install [THEME_NAME]",
	Short: "Installe un th√®me Slidev",
	Long: `Installe un th√®me Slidev sp√©cifique.

Exemples:
  ocf-cli themes install @slidev/theme-seriph
  ocf-cli themes install academic`,
	Args: cobra.ExactArgs(1),
	RunE: runThemesInstall,
}

func runThemesInstall(cmd *cobra.Command, args []string) error {
	themeName := args[0]
	client := createClient()

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
	defer cancel()

	cmd.Printf("üé® Installation du th√®me: %s\n", themeName)

	result, err := client.Themes.Install(ctx, themeName)
	if err != nil {
		return fmt.Errorf("erreur d'installation: %w", err)
	}

	if result.Success {
		cmd.Printf("‚úÖ Th√®me '%s' install√© avec succ√®s\n", result.Theme)
	} else {
		cmd.Printf("‚ùå √âchec de l'installation: %s\n", result.Message)
		if result.Error != "" {
			cmd.Printf("Erreur: %s\n", result.Error)
		}
	}

	return nil
}

// themesDetectCmd d√©tecte les th√®mes requis pour un job
var themesDetectCmd = &cobra.Command{
	Use:   "detect [JOB_ID]",
	Short: "D√©tecte les th√®mes requis pour un job",
	Long: `Analyse les fichiers sources d'un job pour d√©tecter automatiquement 
les th√®mes Slidev requis.

Exemples:
  ocf-cli themes detect 550e8400-e29b-41d4-a716-446655440001`,
	Args: cobra.ExactArgs(1),
	RunE: runThemesDetect,
}

func runThemesDetect(cmd *cobra.Command, args []string) error {
	jobID := args[0]
	client := createClient()

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	cmd.Printf("üîç D√©tection des th√®mes pour le job: %s\n", jobID)

	result, err := client.Themes.DetectForJob(ctx, jobID)
	if err != nil {
		return fmt.Errorf("erreur de d√©tection: %w", err)
	}

	cmd.Printf("üìä R√©sultats de la d√©tection\n")
	cmd.Printf("============================\n")
	cmd.Printf("Th√®mes d√©tect√©s: %d\n", result.DetectedCount)

	if len(result.InstalledThemes) > 0 {
		cmd.Printf("\n‚úÖ Th√®mes d√©j√† install√©s:\n")
		for _, theme := range result.InstalledThemes {
			cmd.Printf("  - %s (%s)\n", theme.Name, theme.Version)
		}
	}

	if len(result.MissingThemes) > 0 {
		cmd.Printf("\n‚ùå Th√®mes manquants:\n")
		for _, theme := range result.MissingThemes {
			cmd.Printf("  - %s\n", theme)
		}

		cmd.Printf("\nüí° Pour installer automatiquement:\n")
		cmd.Printf("   ocf-cli themes auto-install %s\n", jobID)
	}

	return nil
}

// themesAutoInstallCmd installe automatiquement les th√®mes manquants
var themesAutoInstallCmd = &cobra.Command{
	Use:   "auto-install [JOB_ID]",
	Short: "Installe automatiquement les th√®mes manquants pour un job",
	Long: `D√©tecte et installe automatiquement tous les th√®mes requis pour un job.

Exemples:
  ocf-cli themes auto-install 550e8400-e29b-41d4-a716-446655440001`,
	Args: cobra.ExactArgs(1),
	RunE: runThemesAutoInstall,
}

func runThemesAutoInstall(cmd *cobra.Command, args []string) error {
	jobID := args[0]
	client := createClient()

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Minute)
	defer cancel()

	cmd.Printf("üé® Installation automatique des th√®mes pour le job: %s\n", jobID)

	result, err := client.Themes.AutoInstallForJob(ctx, jobID)
	if err != nil {
		return fmt.Errorf("erreur d'installation automatique: %w", err)
	}

	cmd.Printf("üìä R√©sultats de l'installation\n")
	cmd.Printf("==============================\n")
	cmd.Printf("Th√®mes trait√©s: %d\n", result.TotalThemes)
	cmd.Printf("Succ√®s: %d\n", result.Successful)
	cmd.Printf("√âchecs: %d\n", result.Failed)

	if len(result.Results) > 0 {
		cmd.Printf("\nD√©tails:\n")
		for _, themeResult := range result.Results {
			status := "‚ùå"
			if themeResult.Success {
				status = "‚úÖ"
			}

			cmd.Printf("  %s %s", status, themeResult.Theme)
			cmd.Printf(" (%d)", themeResult.Duration)

			cmd.Printf("\n")

			if !themeResult.Success && themeResult.Error != "" {
				cmd.Printf("    Erreur: %s\n", themeResult.Error)
			}

			if viper.GetBool("verbose") && len(themeResult.Logs) > 0 {
				for _, log := range themeResult.Logs {
					cmd.Printf("    Log: %s\n", strings.TrimSpace(log))
				}
			}
		}
	}

	return nil
}

func init() {
	rootCmd.AddCommand(themesCmd)

	// Sous-commandes
	themesCmd.AddCommand(themesListCmd)
	themesCmd.AddCommand(themesInstallCmd)
	themesCmd.AddCommand(themesDetectCmd)
	themesCmd.AddCommand(themesAutoInstallCmd)

	// Aliases
	themesListCmd.Aliases = []string{"ls", "l"}
	themesInstallCmd.Aliases = []string{"add", "i"}
	themesAutoInstallCmd.Aliases = []string{"auto", "ai"}
}
