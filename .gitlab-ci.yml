# GitLab CI/CD Configuration for OCF Worker SDK
variables:
  GO_VERSION: "1.24.5"
  CGO_ENABLED: "0"
  GOOS: "linux"
  GOARCH: "amd64"
  GORELEASER_VERSION: "v2.11.1"
  PACKAGE_REGISTRY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/ocf-worker-cli/${CI_COMMIT_TAG}

stages:
  - validate
  - test
  - security
  - quality
  - build
  - goreleaser
  - package
  - prepare-release
  - release
  - distribute

# Cache Go modules
.go_cache: &go_cache
  cache:
    key: go-mod-$CI_COMMIT_REF_SLUG
    paths:
      - .go/pkg/mod/

# Go base job template
.go_job: &go_job
  image: golang:${GO_VERSION}
  <<: *go_cache
  before_script:
    - export GOPATH="$CI_PROJECT_DIR/.go"
    - export PATH="$GOPATH/bin:$PATH"
    - mkdir -p "$GOPATH/bin"
    - go version
    - go mod download

# Validate Go code compiles
validate:
  <<: *go_job
  stage: validate
  script:
    - go build ./...
    - go vet ./...
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Run tests with coverage
test:
  <<: *go_job
  stage: test
  script:
    - go test -v -coverprofile=coverage.out -covermode=atomic ./...
    - go tool cover -func=coverage.out
    - go tool cover -html=coverage.out -o coverage.html
    # Convert to cobertura format for GitLab
    - go install github.com/boumenot/gocover-cobertura@latest
    - gocover-cobertura < coverage.out > coverage.xml
  coverage: '/total:\s+\(statements\)\s+(\d+.\d+)%/'
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - coverage.html
      - coverage.out
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Lint with golangci-lint
lint:
  stage: quality
  image: golangci/golangci-lint:v1.59-alpine
  script:
    - golangci-lint --version
    - golangci-lint run --out-format colored-line-number --issues-exit-code 0
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: gl-code-quality-report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Security scan with gosec
security:
  <<: *go_job
  stage: security
  script:
    - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
    - gosec -fmt json -out gosec-report.json ./...
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - gosec-report.json
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Dependency check
dependency-check:
  <<: *go_job
  stage: security
  script:
    - go list -json -deps ./... | nancy sleuth
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Coverage gate
coverage-gate:
  <<: *go_job
  stage: quality
  script:
    - |
      COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
      echo "Current coverage: ${COVERAGE}%"
      THRESHOLD=70.0
      if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
        echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
        exit 1
      else
        echo "Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
      fi
  dependencies:
    - test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ==============================
# BUILD & PACKAGING (Nouvelle phase)
# ==============================

# Build des binaires pour d√©veloppement
build-dev:
  <<: *go_job
  stage: build
  script:
    - echo "üî® Build de d√©veloppement..."
    - make build
    - ./ocf-worker-cli --version
  artifacts:
    paths:
      - ocf-worker-cli
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# G√©n√©ration des fichiers d'autocompl√©tion
generate-completion:
  <<: *go_job
  stage: build
  script:
    - echo "üîß G√©n√©ration de l'autocompl√©tion..."
    - make completion
  artifacts:
    paths:
      - scripts/completion/
    expire_in: 1 week
  dependencies:
    - build-dev
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Build GoReleaser (snapshot pour branches)
build-snapshot:
  stage: build
  image: 
    name: goreleaser/goreleaser:${GORELEASER_VERSION}
    entrypoint: [""]
  dependencies:
    - generate-completion
  before_script:
    - apk add --no-cache make git
  script:
    - echo "üì¶ Build GoReleaser (snapshot)..."
    - goreleaser build --clean --snapshot
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ==============================
# RELEASES (Pour les tags uniquement)
# ==============================

# Release compl√®te avec GoReleaser (tags uniquement)
goreleaser:
  stage: goreleaser
  image: 
    name: goreleaser/goreleaser:${GORELEASER_VERSION}
    entrypoint: [""]
  dependencies:
    - test
    - lint
    - generate-completion
  before_script:
    - apk add --no-cache make git
  script:
    - echo "üöÄ Release GoReleaser..."
    - goreleaser release --clean
  artifacts:
    paths:
      - dist/
    expire_in: 1 month
  rules:
    - if: $CI_COMMIT_TAG

# Upload vers GitLab Package Registry
upload-packages:
  stage: package
  image: curlimages/curl:latest
  dependencies:
    - goreleaser
  script:
    - echo "üì§ Upload vers GitLab Package Registry..."
    - |
      for file in dist/*.deb; do
        if [ -f "$file" ]; then
          echo "Uploading $(basename "$file")..."
          curl --location --header "JOB-TOKEN: $CI_JOB_TOKEN" \
               --upload-file "$file" \
               "${PACKAGE_REGISTRY_URL}/$(basename "$file")"
        fi
      done
    - |
      for file in dist/*.tar.gz; do
        if [ -f "$file" ]; then
          echo "Uploading $(basename "$file")..."
          curl --location --header "JOB-TOKEN: $CI_JOB_TOKEN" \
               --upload-file "$file" \
               "${PACKAGE_REGISTRY_URL}/$(basename "$file")"
        fi
      done
  rules:
    - if: $CI_COMMIT_TAG

# Mise √† jour de la documentation
update-docs:
  stage: prepare-release
  image: alpine:latest
  script:
    - echo "üìö Mise √† jour de la documentation..."
    - |
      # G√©n√©rer les stats de release
      echo "Release ${CI_COMMIT_TAG} cr√©√©e automatiquement" > release-notes.md
      echo "" >> release-notes.md
      echo "## Installation" >> release-notes.md
      echo '```bash' >> release-notes.md
      echo "curl -s ${CI_PROJECT_URL}/-/raw/main/install.sh | bash" >> release-notes.md
      echo '```' >> release-notes.md
  artifacts:
    paths:
      - release-notes.md
    expire_in: 1 month
  rules:
    - if: $CI_COMMIT_TAG

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  dependencies: 
   - update-docs
   - goreleaser
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      glab auth login --job-token $CI_JOB_TOKEN --hostname $CI_SERVER_HOST --api-protocol $CI_SERVER_PROTOCOL
      glab release create ${VERSION} -F release-notes.md ./dist/*
      # # generate asset link arguments in a loop
      # asset_args=()
      # for file in dist/*.tar.gz; do
      #   if [ -f "$file" ]; then
      #     url="${PACKAGE_REGISTRY_URL}/$(basename "$file")"
      #     asset_info='{"name":"'$file'","url":'$url'"}'
      #     asset_args+=(--assets-link $asset_info)
      #   fi
      # done
      # release-cli create \
      # --name "Release ${VERSION}" \
      # --tag-name $CI_COMMIT_TAG \
      # --description release-notes.md \
      # "${asset_args[@]}"

# ==============================
# DISTRIBUTION (Scripts d'installation)
# ==============================

# Validation du script d'installation
validate-install-script:
  stage: distribute
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y curl tar bash shellcheck
  script:
    - echo "üîç Validation du script d'installation..."
    - shellcheck install.sh
    - echo "‚úÖ Script d'installation valid√©"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Test d'installation sur diff√©rents OS
.test-install-template: &test-install-template
  stage: distribute
  dependencies:
    - goreleaser
  script:
    - echo "üß™ Test d'installation sur $OS_NAME..."
    - chmod +x install.sh
    - ./install.sh --version ${CI_COMMIT_TAG#v}
    - ocf-worker-cli --version
    - echo "‚úÖ Installation test√©e avec succ√®s"
  rules:
    - if: $CI_COMMIT_TAG

test-install-ubuntu:
  <<: *test-install-template
  image: ubuntu:22.04
  variables:
    OS_NAME: "Ubuntu 22.04"
  before_script:
    - apt-get update && apt-get install -y curl tar

test-install-debian:
  <<: *test-install-template
  image: debian:12
  variables:
    OS_NAME: "Debian 12"
  before_script:
    - apt-get update && apt-get install -y curl tar

# D√©ploiement du script d'installation
deploy-install-script:
  stage: distribute
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "üåê D√©ploiement du script d'installation..."
    - |
      # Upload du script d'installation vers GitLab
      curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
           --upload-file "install.sh" \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/files/install.sh/raw?branch=main"
    - echo "‚úÖ Script d'installation d√©ploy√©"
    - echo "üìñ URL d'installation ${CI_PROJECT_URL}/-/raw/main/install.sh"
  rules:
    - if: $CI_COMMIT_TAG

# ==============================
# NOTIFICATION & DOCUMENTATION
# ==============================

# Notification de release
notify-release:
  stage: distribute
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "üì¢ Notification de release..."
    - |
      echo "üéâ Nouvelle release OCF Worker CLI ${CI_COMMIT_TAG}"
      echo "üì¶ Paquets disponibles:"
      echo "  - .deb (Debian/Ubuntu)"
      echo "  - .tar.gz (Universel)"
      echo ""
      echo "üíæ Installation rapide:"
      echo "  curl -s ${CI_PROJECT_URL}/-/raw/main/install.sh | bash"
      echo ""
      echo "üìñ Plus d'infos: ${CI_PROJECT_URL}/-/releases/${CI_COMMIT_TAG}"
    # Ici vous pouvez ajouter des webhooks Slack, Discord, etc.
  rules:
    - if: $CI_COMMIT_TAG
